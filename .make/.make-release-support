#!/bin/bash
#
#   Copyright 2015  Xebia Nederland B.V.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
function hasChanges() {
	test -n "$(git status -s .)"
}

function getRelease() {
	awk -F= '/^release=/{print $2}' .release
}

function getBaseTag() {
		sed -n -e "s/^tag=\(.*\)$(getRelease)\$/\1/p" .release
}

function getTag() {
	if [ -z "$1" ] ; then
		awk -F= '/^tag/{print $2}' .release
	else
		echo "$(getBaseTag)$1"
	fi
}

function setRelease() {
	if [ -n "$1" ] ; then
		sed -i.x -e "s/^tag=.*/tag=$(getTag $1)/" .release
		sed -i.x -e "s/^release=.*/release=$1/g" .release
		rm -f .release.x
		runPreTagCommand "$1"
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

function runPreTagCommand() {
	if [ -n "$1" ] ; then
		COMMAND=$(sed -n -e "s/@@RELEASE@@/$1/g" -e 's/^pre_tag_command=\(.*\)/\1/p' .release)
		if [ -n "$COMMAND" ] ; then
			if ! OUTPUT=$(bash -c "$COMMAND" 2>&1) ; then echo $OUTPUT >&2 && exit 1 ; fi
		fi
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

function tagExists() {
	tag=${1:-$(getTag)}
	test -n "$tag" && test -n "$(git tag | grep "^$tag\$")"
}

function differsFromRelease() {
	tag=$(getTag)
	! tagExists $tag || test -n "$(git diff --shortstat -r $tag .)"
}

function getVersion() {
	result=$(getRelease)
# TODO: For Future Use
#	if differsFromRelease; then
#		result="$result-$(git log -n 1 --format=%h .)"
#	fi

	if hasChanges -eq 1; then
	  result="$result-dirty"
  fi
  echo $result
}

function nextPatchLevel() {
	version=${1:-$(getRelease)}
	major_and_minor=$(echo $version | cut -d. -f1,2)
	patch=$(echo $version | cut -d. -f3)
	version=$(printf "%s.%d" $major_and_minor $(($patch + 1)))
	echo $version
}

function nextMinorLevel() {
	version=${1:-$(getRelease)}
	major=$(echo $version | cut -d. -f1);
	minor=$(echo $version | cut -d. -f2);
	version=$(printf "%d.%d.0" $major $(($minor + 1))) ;
	echo $version
}

function nextMajorLevel() {
	version=${1:-$(getRelease)}
	major=$(echo $version | cut -d. -f1);
	version=$(printf "%d.0.0" $(($major + 1)))
	echo $version
}

# Get tag description given in ..release file
function getTagDescription(){
	awk -F= '/^tag_description=/{print $2}' .release
}

# Create tag
function createGitTag(){
	tag=$(awk -F= '/^tag=/{print $2}' .release)
	echo $tag
	description=$(getTagDescription)
	git tag -a "$tag" -m "$description"
}

# Publish tag. (If there is error while publishing tag, docker image with same tag will be deleted.)
function gitPush() {
  tag=$(awk -F= '/^tag=/{print $2}' .release)
  git_username=$1
  private_token=$PRIVATE_TOKEN
  echo $tag
  $(git push https://"$git_username":"$private_token"@gitlab.com/ska-telescope/ska-skampi.git "$tag")
  result=$(echo $?)
  if [ $result -ne 0 ];
  then
    echo "DID NOT WORK"
    # deleteImageFromNexus
  fi
}

# Get release notes for SKAMPI-release from .release file.
function getReleaseDescription(){
	awk -F= '/^release_notes=/{print $2}' .release
}

# Create GitLab release for SKAMPI-prototype with version given in .release file
function releaseSKAMPI() {
  name=$(getRelease)
  echo "NAME = $name"
  tag_name=$(getTag)
  echo "TAG_NAME = $tag_name"
  release_notes=$(getReleaseDescription)
  echo "RELEASE NOTES = $release_notes"
  private_token=$PRIVATE_TOKEN
  data1=('{ "name": "'$name'", "tag_name": "'$tag_name'", "description": "'"$release_notes"'"}')
  result=$(curl --header 'Content-Type: application/json' \
                --header  "PRIVATE-TOKEN: "$private_token \
                --data "$data1" \
                --request POST https://gitlab.com/api/v4/projects/"$CI_PROJECT_ID"/releases)
  echo "result = $result"
}

# Delete released SKAMPI-prototype with version given in .release file
function deleteSKAMPIRelease() {
  tag_name=$(getTag)
  private_token=$PRIVATE_TOKEN
  target="https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/"$tag_name
  result=$(curl --request DELETE --header "PRIVATE-TOKEN: "$private_token "$target")
  echo $result
}

function deleteTag() {
  tag=$(awk -F= '/^tag=/{print $2}' .release)
  git_username=$1
  private_token=$PRIVATE_TOKEN
  git push --delete https://"$git_username":"$private_token"@gitlab.com/ska-telescope/ska-skampi.git "$tag"
}

# Create GitLab release SKAMPI with version given in .release file.
# If there is an error while creating GitLab release, published tag and docker (with same version number) image will be deleted.)
function releaseSKAMPIIfNoError() {
  tag_name=$(getTag)
  private_token=$PRIVATE_TOKEN
  echo "CHECKING IF THIS RELEASE ALREADY EXISTS. IF IT DOES NOT EXISTS, IT WILL GIVE KeyError: 'tag_name' (EXPECTED BEHAVIOUR)."
  releaseAlreadyExists=$(curl --header "PRIVATE-TOKEN: "$private_token "https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/""$tag_name" | \
  python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")
  if [ "$releaseAlreadyExists" == "$tag_name" ]
  then
    echo "THIS RELEASE IS ALREADY EXISTS. NEW RELEASE WITH SAME VERSION IS NOT POSSIBLE."
  else
    echo "RELEASING SKAMPI..."
    releaseSKAMPI
    checkReleaseExists=$(curl --header "PRIVATE-TOKEN: "$private_token "https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/""$tag_name" | \
    python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")
    if [ "$checkReleaseExists" != "$tag_name" ]; then
        echo "ERROR WHILE RELEASING SKAMPI. TAG WILL BE DELETED."
        git_username=$1
        deleteTag $git_username
    fi
  fi
}

#TODO: may be required if gitCommitPush gets executed after a commit was pushed to master - tagged commit may then be behind master
# function gitFetchPull() {
# 	git_username=$1
#     git remote add origin-push $(git config remote.origin.url)
#     git fetch origin-push
#     $(git pull origin-push master)
# 	result=$(echo $?)
# 	if [ $result -ne 0 ];
# 	then
# 		echo "DID NOT WORK"
# 		return $result
# 	fi
# }

# Commit next version to master
function gitCommitPush() {
	for CHART in charts/*/Chart.yaml; do
		git add $CHART
		echo "Adding $CHART to git history."
	done
	git commit -m "Setting next development versions"
	# echo "USERNAME: $USERNAME"
	git_username=$1
	# echo "\$git_username: $git_username - this should be the same as previous line"
	private_token=$PRIVATE_TOKEN
	$(git push https://"$git_username":"$private_token"@gitlab.com/ska-telescope/ska-skampi.git HEAD:master)
	result=$(echo $?)
	if [ $result -ne 0 ];
	then
		echo "DID NOT WORK"
		return $result
	fi
}
