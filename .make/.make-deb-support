#!/bin/bash

# Shellscript support function file for Deb package Make targets

# Find and load the release support script
CURRENT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

function buildDeb() {
    if [ -z "$1" ] ; then
		echo "buildDeb: Missing VERSION"
        exit 1
	else
        VERSION="$1"
	fi

    if [ -z "$2" ] ; then
		echo "buildDeb: Missing DEBOUTPUT_DIR"
        exit 1
	else
        DEB_OUTPUT_DIR="$2"
	fi
    
    if [ -z "$3" ] ; then
		echo "buildDeb: Missing DESCRIPTION"
        exit 1
	else
        DESCRIPTION="$3"
	fi 
    
    if [ -z "$4" ] ; then
		echo "buildDeb: Missing PACKAGE_CONTACT"
        exit 1
	else
        PACKAGE_CONTACT="$4"
	fi
    
    if [ -z "$5" ] ; then
		echo "buildDeb: Missing PACKAGE_MAINTAINER"
        exit 1
	else
        PACKAGE_MAINTAINER="$5"
	fi     
    
    if [ -z "$6" ] ; then
		echo "buildDeb: Missing NAME"
        exit 1
	else
        NAME="$6"
	fi 

    # ST-1058: Skip a src folder if there is no CMakeLists.txt file
    if [ ! -f CMakeLists.txt ] ; then
        echo "buildDeb: Missing CMakeLists.txt"
        exit 2
    fi

    echo "buildDeb: name: $NAME"
    echo "buildDeb: version: $VERSION"
    echo "buildDeb: description: $DESCRIPTION"
    echo "buildDeb: output directory: $DEB_OUTPUT_DIR"
    echo "buildDeb: package contact: $PACKAGE_CONTACT"
    echo "buildDeb: package mantainer: $PACKAGE_MAINTAINER"

    # build project
    DEB_ROOT_DIR=$( pwd )
    mkdir -p $DEB_OUTPUT_DIR && cd $_
    cmake \
        -DCMAKE_BUILD_TYPE=release \
        -DPACKAGE_NAME=$NAME \
        -DVERSION="$VERSION" \
        -DDESCRIPTION="$DESCRIPTION" \
        -DPACKAGE_CONTACT="$PACKAGE_CONTACT" \
        -DPACKAGE_MAINTAINER="$PACKAGE_MAINTAINER" \
        $DEB_ROOT_DIR
    cmake --build .

    # build deb
    cpack -G DEB

    # Read the MANIFEST metadata
    MANIFEST=
    for METADATA in $(<$DEB_ROOT_DIR/MANIFEST.skao.int) ; do
        MANIFEST="$MANIFEST$METADATA\n"
    done

    # Add metadata to debian/control
    for deb_file in *.deb; do
        [ -e "$deb_file" ] || continue

        # create temp directory
        DEB_TMPDIR=$(mktemp -d)
        if [ -z "${DEB_TMPDIR}" ]; then
            echo "Failed to create a temporary work directory"
            exit 1
        fi

        # unpack deb package to temo directory
        dpkg-deb -R "${deb_file}" "${DEB_TMPDIR}"

        if [ -e "${DEB_TMPDIR}/DEBIAN/control" ]; then
            # Remove empty lines
            sed -i '/^$/d' ${DEB_TMPDIR}/DEBIAN/control

            # append all metadata from MANIFEST
            while read -r METADATA; do
                IFS='=' read -r -a key_value <<< "$METADATA"

                # Ignore version - already present
                if [[ "${key_value[0]}" == "VERSION" ]]
                then
                    continue
                fi 
                
                # Ignore version - already present
                if [[ "${key_value[0]}" == "PROJECT" ]]
                then
                    continue
                fi

                echo "${key_value[0]}: ${key_value[1]}" >> "${DEB_TMPDIR}/DEBIAN/control"
            done < ${DEB_ROOT_DIR}/MANIFEST.skao.int

            # build deb package
            dpkg-deb -b "${DEB_TMPDIR}" "${deb_file}"

        fi

        # remove temp directory
        rm -rf "${DEB_TMPDIR}"

    done

    echo "buildDeb: built package (with metadata): $(ls $DEB_ROOT_DIR/$DEB_OUTPUT_DIR/*.deb)"
}

function publishDeb() {
    if [ -z "$1" ] ; then
		echo "publishDeb: Missing DEB_OUTPUT_DIR"
        exit 1
	else
        DEB_OUTPUT_DIR="$1"
	fi

    DEB_FULL_PKG_PATH=$(ls $DEB_OUTPUT_DIR/*.deb)

    if [ ! -f "${DEB_FULL_PKG_PATH}" ]; then
        echo "publishDeb: Archive does not exist: ${DEB_FULL_PKG_PATH} - aborting."
        exit 1
    fi

    echo "publishDeb: package to publish: $DEB_FULL_PKG_PATH"

    #upload the OUTPUT collections having metadata to CAR
    curl -v -u $CAR_APT_USERNAME:$CAR_APT_PASSWORD \
        -H "Content-Type: multipart/form-data" \
        --data-binary "@./$DEB_FULL_PKG_PATH" $CAR_APT_REPOSITORY_URL
}

