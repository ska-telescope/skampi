#!/usr/bin/env bash

# Shellscript support function file for OCI Images Make targets

# Lint OCI Image Dockerfiles in images/<subdirs>
function ociImageLint() {
	if [ -z "$1" ] ; then
		echo "ociImageLint: Missing OCI_IMAGES"
        exit 1
	else
        OCI_IMAGES="$1"
	fi

	if [ -f Dockerfile ] ; then
        echo "ociImageLint: Linting: ${OCI_IMAGE_FILE_PATH}"
        ${OCI_BUILDER} run --rm -i ${OCI_LINTER} hadolint --failure-threshold error - < \
            ${OCI_IMAGE_FILE_PATH}
            ret_val=$?
            if [ $ret_val -ne 0 ]; then
                echo "ociImageLint: Linting of ${OCI_IMAGES} failed - aborting!"
                exit 1;
            fi
    else
        for IMAGE in ${OCI_IMAGES}; do
            echo "ociImageLint: Linting: ${IMAGE}"
            ${OCI_BUILDER} run --rm -i ${OCI_LINTER} hadolint --failure-threshold error - < \
            images/${IMAGE}/${OCI_IMAGE_FILE_PATH}
            ret_val=$?
            if [ $ret_val -ne 0 ]; then
                echo "ociImageLint: Linting of ${IMAGE} failed - aborting!"
                exit 1;
            fi
        done
    fi
}

# Check if OCI Image exists in CAR
function ociImageExists() {
	if [ -z "$1" ] ; then
		echo "ociImageExists: Missing OCI_IMAGE"
        exit 1
	fi
	if [ -z "$2" ] ; then
		echo "ociImageExists: Missing OCI_TAG"
        exit 1
	fi
    OCI_IMAGE=$1
    OCI_TAG=$2
    curl --output /dev/null --silent --head --fail -r 0-0 "https://artefact.skao.int/repository/$OCI_NEXUS_REPO/v2/$OCI_IMAGE/manifests/$OCI_TAG"
    ocii_result=$?
    echo "$ocii_result"
}

# Build OCI Image
function ociImageBuild() {
	if [ -z "$1" ] ; then
		echo "ociImageBuild: Missing OCI_IMAGE"
        exit 1
	else
        OCI_IMAGE="$1"
    fi

    if [ -z "$OCI_IMAGE_BUILDER" ]
    then
        OCI_IMAGE_BUILDER=podman
    fi

    if [ -z "$CAR_OCI_REGISTRY_HOST" ]
    then
        echo "ociImageBuild: CAR_OCI_REGISTRY_HOST is not set"
    fi

    if [ -z "$OCI_IMAGE_BUILD_CONTEXT" ]
    then
        OCI_IMAGE_BUILD_CONTEXT=.
    fi
	if [ "." = "${OCI_IMAGE_BUILD_CONTEXT}" ]; then
		OCI_IMAGE_BUILD_CONTEXT="images/${OCI_IMAGE}"
	fi

    if [ -z "$OCI_IMAGE_FILE_PATH" ]
    then
        OCI_IMAGE_FILE_PATH=Dockerfile
    fi

    if [ -z "$OCI_BUILD_ADDITIONAL_TAGS" ]
    then
        OCI_BUILD_ADDITIONAL_TAGS=""
    fi

    # Collect LABELs from CI environment variables
    ENV_LABELS="CI_COMMIT_AUTHOR CI_COMMIT_REF_NAME CI_COMMIT_REF_SLUG"
    ENV_LABELS+=" CI_COMMIT_SHA CI_COMMIT_SHORT_SHA CI_COMMIT_TIMESTAMP"
    ENV_LABELS+=" CI_JOB_ID CI_JOB_URL"
    ENV_LABELS+=" CI_PIPELINE_ID CI_PIPELINE_IID CI_PIPELINE_URL"
    ENV_LABELS+=" CI_PROJECT_ID CI_PROJECT_PATH_SLUG CI_PROJECT_URL"
    ENV_LABELS+=" CI_RUNNER_ID CI_RUNNER_REVISION CI_RUNNER_TAGS"
    ENV_LABELS+=" GITLAB_USER_NAME GITLAB_USER_EMAIL GITLAB_USER_LOGIN"
    ENV_LABELS+=" GITLAB_USER_ID"
    for KEY in $ENV_LABELS; do
      VALUE=$(eval "echo \"\$${KEY}\"")
      if [ -n "$VALUE" ]; then
        if [ -z "$OCI_LABELS" ]; then
          OCI_LABELS="--label $KEY='$VALUE'"
        else
          OCI_LABELS="$OCI_LABELS --label $KEY='$VALUE'"
        fi
      fi
    done

    # Check if this is a dev build
    if [[ "${CAR_OCI_REGISTRY_HOST}" == registry.gitlab.com* ]] || [[ -z "${CAR_OCI_REGISTRY_HOST}" ]]; then
        echo "ociImageBuild: Gitlab registry is used to publish as the image is for development use"
        OCI_TAG=$VERSION-dev.c$CI_COMMIT_SHORT_SHA  #"-" is used as "+" causes the docker building process to fail
    else
        OCI_TAG=$VERSION
    fi

    # Build the image
    OCI_BUILD_COMMAND="$OCI_BUILDER build $OCI_LABELS -t $OCI_IMAGE:$OCI_TAG -f $OCI_IMAGE_FILE_PATH $OCI_BUILD_ADDITIONAL_ARGS $OCI_IMAGE_BUILD_CONTEXT"
    echo "ociImageBuild: Build command: $OCI_BUILD_COMMAND"
    bash -c "$OCI_BUILD_COMMAND"
    status=$?
    if ! [[ $status == 0 ]]; then
        exit $status
    fi

    # check for push
    # if CAR_OCI_REGISTRY_HOST is not set then only tag and skip push
    if [ -z "$CAR_OCI_REGISTRY_HOST" ]; then
        echo "ociImageBuild: CAR_OCI_REGISTRY_HOST (${CAR_OCI_REGISTRY_HOST}) not set, or OCI_SKIP_PUSH (${OCI_SKIP_PUSH}) skipping publish"
        # don't use that 'orrible latest
        # $OCI_BUILDER tag $OCI_IMAGE:$OCI_TAG $OCI_IMAGE:latest
    else
        # tag for push to remote
        $OCI_BUILDER tag $OCI_IMAGE:$OCI_TAG $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG
        # if CAR_OCI_REGISTRY_HOST is set, then check whether it is CAR or not
        if [[ "${CAR_OCI_REGISTRY_HOST}" == artefact.skao.int* ]]; then
            curl --output /dev/null --silent --head --fail -r 0-0 "https://$CAR_OCI_REGISTRY_HOST/repository/$OCI_NEXUS_REPO/v2/$OCI_IMAGE/manifests/$OCI_TAG"; \
            result=$?
            # Push the image
            if [ $result -eq 0 ]; then
                echo "ociImageBuild: Version $OCI_TAG of image $OCI_IMAGE already exists, skipping push"
            else
                if [ -n "${OCI_SKIP_PUSH}" ]; then
                    echo "ociImageBuild: Skipping push OCI_SKIP_PUSH=${OCI_SKIP_PUSH} to  $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG"
                else
                    $OCI_BUILDER push $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG
                    status=$?
                    if ! [[ $status == 0 ]]; then
                        echo "ociImageBuild: push to $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG failed - abort"
                        exit $status
                    fi
                    echo "ociImageBuild: pushed to $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG"
                fi
            fi
        else
        # if it is not the CAR then tag for $VERSION and push both - could be anywhere eg: localhost:5000
        # or registry.gitlab.com ...
        # https://registry.gitlab.com/v2/ska-telescope/sdi/ska-cicd-makefile/ska-cicd-makefile/manifests/0.0.0
            echo "ociImageBuild: Skipping publish check"

            for DEV_TAG in $OCI_BUILD_ADDITIONAL_TAGS; do
                $OCI_BUILDER tag $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$DEV_TAG
                echo "ociImageBuild: created additional dev tag $OCI_IMAGE:$DEV_TAG"
            done
            
            if [ -n "${OCI_SKIP_PUSH}" ]; then
                echo "ociImageBuild: Skipping push OCI_SKIP_PUSH=${OCI_SKIP_PUSH}"
            else
                $OCI_BUILDER push $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG
                status=$?
                if ! [[ $status == 0 ]]; then
                    echo "ociImageBuild: push to $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG failed - abort"
                    exit $status
                fi
                echo "ociImageBuild: pushed to $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG"

                # pushing $VERSION to registry.gitlab.com as well - this can be used as a build cache
                $OCI_BUILDER tag $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$OCI_TAG \
                    $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$VERSION
                $OCI_BUILDER push $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$VERSION
                status=$?
                if ! [[ $status == 0 ]]; then
                    echo "ociImageBuild: push to $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$VERSION failed - abort"
                    exit $status
                fi
                echo "ociImageBuild: pushed to $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$VERSION"

                # push additional tags defined by the user
                for DEV_TAG in $OCI_BUILD_ADDITIONAL_TAGS; do
                    $OCI_BUILDER push $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$DEV_TAG
                    status=$?
                    if ! [[ $status == 0 ]]; then
                        echo "ociImageBuild: push to $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$DEV_TAG failed - abort"
                        exit $status
                    fi
                    echo "ociImageBuild: pushed to $CAR_OCI_REGISTRY_HOST/$OCI_IMAGE:$DEV_TAG"
                done
            fi
        fi
    fi
    echo "ociImageBuild: done."
}


# Scan OCI Image - must run inside docker.io/aquasec/trivy:latest - must add make and bash
function ociImageScan() {
	if [ -z "$1" ] ; then
		echo "ociImageScan: Missing OCI_IMAGE"
        exit 1
    fi
    OCI_IMAGE="$1"
	if [ -z "$2" ] ; then
		echo "ociImageScan: Missing OCI_TAG"
        exit 1
    fi
    OCI_TAG="$2"

    # Check if this is a dev build
    if [[ "${CAR_OCI_REGISTRY_HOST}" == registry.gitlab.com* ]] || [[ -z "${CAR_OCI_REGISTRY_HOST}" ]]; then
        echo "ociImageScan: Gitlab registry is used to publish as the image is for development use"
        OCI_TAG=$OCI_TAG-dev.c$CI_COMMIT_SHORT_SHA  #"-" is used as "+" causes the docker building process to fail
    fi

    # if pointing at CAR, then check it is on CAR
    if [[ "${CAR_OCI_REGISTRY_HOST}" == artefact.skao.int* ]]; then
        curl --output /dev/null --silent --head --fail -r 0-0 "https://$CAR_OCI_REGISTRY_HOST/repository/$OCI_NEXUS_REPO/v2/$OCI_IMAGE/manifests/$OCI_TAG"; \
        result=$?
        # Push the image
        if [ $result -eq 0 ]; then
            echo "ociImageScan: Version $OCI_TAG of image $OCI_IMAGE exists - we can Scan"
        else
            echo "ociImageScan: Version $OCI_TAG of image $OCI_IMAGE does not exist - aborting"
            exit 1
        fi
    fi

    OCI_FULL_IMAGE_NAME="${CAR_OCI_REGISTRY_HOST}/${OCI_IMAGE}:${OCI_TAG}"
    echo "ociImageScan: Image: $OCI_FULL_IMAGE_NAME"

    # Show trivy version
    echo "ociImageScan: trivy version: $(trivy --version)"

    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    echo "ociImageScan: trivy clear cache"
    time trivy image --clear-cache

    # update vulnerabilities db
    echo "ociImageScan: trivy update vulnerability db"
    time trivy image --download-db-only

    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    echo "ociImageScan: trivy build report"
    time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl" --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$OCI_FULL_IMAGE_NAME"
    # Prints full report
    echo "ociImageScan: trivy print report"
    time trivy image --exit-code 0 "$OCI_FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    echo "ociImageScan: trivy fail on CRITICAL"
    time trivy image --exit-code 0 --severity CRITICAL "$OCI_FULL_IMAGE_NAME"
    export ocis_result=$?
    # echo "$ocis_result"
}
