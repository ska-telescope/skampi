============================= test session starts ==============================
platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- /Users/aragorn/code/skampi/.venv/bin/python
cachedir: .pytest_cache
metadata: {'Python': '3.9.7', 'Platform': 'macOS-12.4-x86_64-i386-64bit', 'Packages': {'pytest': '6.2.5', 'py': '1.11.0', 'pluggy': '1.0.0'}, 'Plugins': {'bdd': '5.0.0', 'xdist': '2.5.0', 'forked': '1.4.0', 'timeout': '2.1.0', 'json-report': '1.5.0', 'metadata': '1.11.0', 'mock': '3.8.2', 'ordering': '0.6', 'repeat': '0.9.1', 'cov': '3.0.0', 'ska-ser-skallop': '2.19.6'}}
rootdir: /Users/aragorn/code/skampi/tests, configfile: pytest.ini
plugins: bdd-5.0.0, xdist-2.5.0, forked-1.4.0, timeout-2.1.0, json-report-1.5.0, metadata-1.11.0, mock-3.8.2, ordering-0.6, repeat-0.9.1, cov-3.0.0, ska-ser-skallop-2.19.6
collecting ... collected 37 items / 23 deselected / 14 selected

tests/integration/cbf/test_assign_resources.py::test_assign_resources_to_cbf_mid_subarray 
-------------------------------- live log call ---------------------------------
1|2022-07-21T09:37:02.220Z|INFO|MainThread|fxt_telescope_context|fixtures.py#487||setting telescope to maintain being on for the entire session
1|2022-07-21T09:37:02.298Z|INFO|MainThread|determine_factory|configuration.py#29||Selecting components for doing build out testing system
FAILED                                                                   [  7%]
tests/integration/cbf/test_start_up.py::test_cbf_start_up_telescope_mid FAILED [ 14%]
tests/integration/csp/test_assign_resources.py::test_assign_resources_to_csp_mid_subarray 
-------------------------------- live log setup --------------------------------
1|2022-07-21T09:37:02.794Z|INFO|MainThread|fxt_set_csp_online|conftest.py#63||setting csp components online
1|2022-07-21T09:37:02.795Z|INFO|MainThread|determine_factory|configuration.py#29||Selecting components for doing build out testing system
ERROR                                                                    [ 21%]
tests/integration/csp/test_assign_resources.py::test_release_resources_to_csp_mid_subarray ERROR [ 28%]
tests/integration/csp/test_configure.py::test_configure_csp_mid_subarray ERROR [ 35%]
tests/integration/csp/test_scan.py::test_run_a_scan_on_csp_subarray_in_mid ERROR [ 42%]
tests/integration/csp/test_start_up.py::test_csp_start_up_telescope_mid ERROR [ 50%]
tests/integration/sdp/test_assign_resources.py::test_assign_resources_to_sdp_subarray_in_mid FAILED [ 57%]
tests/integration/sdp/test_configure_scan.py::test_configure_scan_on_sdp_subarray_in_mid FAILED [ 64%]
tests/integration/sdp/test_scan.py::test_run_a_scan_on_sdp_subarray_in_mid FAILED [ 71%]
tests/integration/sdp/test_start_up.py::test_sdp_start_up_telescope_mid FAILED [ 78%]
tests/integration/tmc/test_assign_resources.py::test_assign_resources_to_tmc_subarray_in_mid SKIPPED [ 85%]
tests/integration/tmc/test_start_up.py::test_tmc_start_up_telescope_mid SKIPPED [ 92%]
tests/integration/tmc/test_start_up.py::test_tmc_off_telescope_mid SKIPPED [100%]

==================================== ERRORS ====================================
_________ ERROR at setup of test_assign_resources_to_csp_mid_subarray __________

set_subsystem_online = <function fxt_set_subsystem_online.<locals>.fn_set_subsystem_online at 0x10b6c5e50>
nr_of_subarrays = 2

    @pytest.fixture(autouse=True, scope="session")
    def fxt_set_csp_online(
        set_subsystem_online: Callable[[EntryPoint], None], nr_of_subarrays: int
    ):
        """_summary_
    
        :param nr_of_subarrays: _description_
        :type nr_of_subarrays: int
        :param set_subsystem_online: _description_
        :type set_subsystem_online: Callable[[EntryPoint], None]
        """
        logging.info("setting csp components online")
        CSPEntryPoint.nr_of_subarrays = nr_of_subarrays
>       entry_point = CSPEntryPoint()

tests/integration/csp/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/resources/models/csp_model/entry_point.py:425: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/csp_model/entry_point.py:44: in __init__
    self.csp_controller = con_config.get_device_proxy(self._tel.csp.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b286130>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:63 setting csp components online
INFO     ska_ser_skallop.connectors.configuration:configuration.py:29 Selecting components for doing build out testing system
_________ ERROR at setup of test_release_resources_to_csp_mid_subarray _________

set_subsystem_online = <function fxt_set_subsystem_online.<locals>.fn_set_subsystem_online at 0x10b6c5e50>
nr_of_subarrays = 2

    @pytest.fixture(autouse=True, scope="session")
    def fxt_set_csp_online(
        set_subsystem_online: Callable[[EntryPoint], None], nr_of_subarrays: int
    ):
        """_summary_
    
        :param nr_of_subarrays: _description_
        :type nr_of_subarrays: int
        :param set_subsystem_online: _description_
        :type set_subsystem_online: Callable[[EntryPoint], None]
        """
        logging.info("setting csp components online")
        CSPEntryPoint.nr_of_subarrays = nr_of_subarrays
>       entry_point = CSPEntryPoint()

tests/integration/csp/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/resources/models/csp_model/entry_point.py:425: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/csp_model/entry_point.py:44: in __init__
    self.csp_controller = con_config.get_device_proxy(self._tel.csp.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b286130>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
______________ ERROR at setup of test_configure_csp_mid_subarray _______________

set_subsystem_online = <function fxt_set_subsystem_online.<locals>.fn_set_subsystem_online at 0x10b6c5e50>
nr_of_subarrays = 2

    @pytest.fixture(autouse=True, scope="session")
    def fxt_set_csp_online(
        set_subsystem_online: Callable[[EntryPoint], None], nr_of_subarrays: int
    ):
        """_summary_
    
        :param nr_of_subarrays: _description_
        :type nr_of_subarrays: int
        :param set_subsystem_online: _description_
        :type set_subsystem_online: Callable[[EntryPoint], None]
        """
        logging.info("setting csp components online")
        CSPEntryPoint.nr_of_subarrays = nr_of_subarrays
>       entry_point = CSPEntryPoint()

tests/integration/csp/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/resources/models/csp_model/entry_point.py:425: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/csp_model/entry_point.py:44: in __init__
    self.csp_controller = con_config.get_device_proxy(self._tel.csp.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b286130>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
___________ ERROR at setup of test_run_a_scan_on_csp_subarray_in_mid ___________

set_subsystem_online = <function fxt_set_subsystem_online.<locals>.fn_set_subsystem_online at 0x10b6c5e50>
nr_of_subarrays = 2

    @pytest.fixture(autouse=True, scope="session")
    def fxt_set_csp_online(
        set_subsystem_online: Callable[[EntryPoint], None], nr_of_subarrays: int
    ):
        """_summary_
    
        :param nr_of_subarrays: _description_
        :type nr_of_subarrays: int
        :param set_subsystem_online: _description_
        :type set_subsystem_online: Callable[[EntryPoint], None]
        """
        logging.info("setting csp components online")
        CSPEntryPoint.nr_of_subarrays = nr_of_subarrays
>       entry_point = CSPEntryPoint()

tests/integration/csp/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/resources/models/csp_model/entry_point.py:425: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/csp_model/entry_point.py:44: in __init__
    self.csp_controller = con_config.get_device_proxy(self._tel.csp.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b286130>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
______________ ERROR at setup of test_csp_start_up_telescope_mid _______________

set_subsystem_online = <function fxt_set_subsystem_online.<locals>.fn_set_subsystem_online at 0x10b6c5e50>
nr_of_subarrays = 2

    @pytest.fixture(autouse=True, scope="session")
    def fxt_set_csp_online(
        set_subsystem_online: Callable[[EntryPoint], None], nr_of_subarrays: int
    ):
        """_summary_
    
        :param nr_of_subarrays: _description_
        :type nr_of_subarrays: int
        :param set_subsystem_online: _description_
        :type set_subsystem_online: Callable[[EntryPoint], None]
        """
        logging.info("setting csp components online")
        CSPEntryPoint.nr_of_subarrays = nr_of_subarrays
>       entry_point = CSPEntryPoint()

tests/integration/csp/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/resources/models/csp_model/entry_point.py:425: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/csp_model/entry_point.py:44: in __init__
    self.csp_controller = con_config.get_device_proxy(self._tel.csp.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b286130>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
=================================== FAILURES ===================================
__________________ test_assign_resources_to_cbf_mid_subarray ___________________

request = <FixtureRequest for <Function test_assign_resources_to_cbf_mid_subarray>>
_pytest_bdd_example = {}

    @pytest.mark.usefixtures(*args)
    def scenario_wrapper(request, _pytest_bdd_example):
        scenario = templated_scenario.render(_pytest_bdd_example)
>       _execute_scenario(feature, scenario, request)

.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario
    _execute_step_function(request, scenario, step, step_func)
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in _execute_step_function
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in <dictcomp>
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:581: in getfixturevalue
    fixturedef = self._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1072: in execute
    result = hook.pytest_fixture_setup(fixturedef=self, request=request)
.venv/lib/python3.9/site-packages/pluggy/_hooks.py:265: in __call__
    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)
.venv/lib/python3.9/site-packages/pluggy/_manager.py:80: in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1126: in pytest_fixture_setup
    result = call_fixture_func(fixturefunc, request, kwargs)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:925: in call_fixture_func
    fixture_result = next(generator)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/fixtures.py:491: in fxt_telescope_context
    context.set_up_a_telescope_per_session()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:225: in set_up_a_telescope_per_session
    self.push_context_onto_session(
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:149: in push_context_onto_session
    return self._session_stack.enter_context(c_m)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_management/telescope_management.py:303: in running_telescope
    entry_point = configuration.get_entry_point()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_control/entry_points/configuration.py:47: in get_entry_point
    return entry_point_cls()
tests/resources/models/cbf_model/entry_point.py:378: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/cbf_model/entry_point.py:46: in __init__
    self.cbf_controller = con_config.get_device_proxy(self._tel.csp.cbf.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b0524c0>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
------------------------------ Captured log call -------------------------------
INFO     ska_ser_skallop.mvp_fixtures.fixtures:fixtures.py:487 setting telescope to maintain being on for the entire session
INFO     ska_ser_skallop.connectors.configuration:configuration.py:29 Selecting components for doing build out testing system
_______________________ test_cbf_start_up_telescope_mid ________________________

request = <FixtureRequest for <Function test_cbf_start_up_telescope_mid>>
_pytest_bdd_example = {}

    @pytest.mark.usefixtures(*args)
    def scenario_wrapper(request, _pytest_bdd_example):
        scenario = templated_scenario.render(_pytest_bdd_example)
>       _execute_scenario(feature, scenario, request)

.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario
    _execute_step_function(request, scenario, step, step_func)
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in _execute_step_function
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in <dictcomp>
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:581: in getfixturevalue
    fixturedef = self._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1062: in execute
    raise val.with_traceback(tb)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1126: in pytest_fixture_setup
    result = call_fixture_func(fixturefunc, request, kwargs)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:925: in call_fixture_func
    fixture_result = next(generator)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/fixtures.py:491: in fxt_telescope_context
    context.set_up_a_telescope_per_session()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:225: in set_up_a_telescope_per_session
    self.push_context_onto_session(
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:149: in push_context_onto_session
    return self._session_stack.enter_context(c_m)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_management/telescope_management.py:303: in running_telescope
    entry_point = configuration.get_entry_point()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_control/entry_points/configuration.py:47: in get_entry_point
    return entry_point_cls()
tests/resources/models/cbf_model/entry_point.py:378: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/cbf_model/entry_point.py:46: in __init__
    self.cbf_controller = con_config.get_device_proxy(self._tel.csp.cbf.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b0524c0>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
_________________ test_assign_resources_to_sdp_subarray_in_mid _________________

request = <FixtureRequest for <Function test_assign_resources_to_sdp_subarray_in_mid>>
_pytest_bdd_example = {}

    @pytest.mark.usefixtures(*args)
    def scenario_wrapper(request, _pytest_bdd_example):
        scenario = templated_scenario.render(_pytest_bdd_example)
>       _execute_scenario(feature, scenario, request)

.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario
    _execute_step_function(request, scenario, step, step_func)
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in _execute_step_function
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in <dictcomp>
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:581: in getfixturevalue
    fixturedef = self._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1062: in execute
    raise val.with_traceback(tb)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1126: in pytest_fixture_setup
    result = call_fixture_func(fixturefunc, request, kwargs)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:925: in call_fixture_func
    fixture_result = next(generator)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/fixtures.py:491: in fxt_telescope_context
    context.set_up_a_telescope_per_session()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:225: in set_up_a_telescope_per_session
    self.push_context_onto_session(
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:149: in push_context_onto_session
    return self._session_stack.enter_context(c_m)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_management/telescope_management.py:303: in running_telescope
    entry_point = configuration.get_entry_point()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_control/entry_points/configuration.py:47: in get_entry_point
    return entry_point_cls()
tests/resources/models/cbf_model/entry_point.py:378: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/cbf_model/entry_point.py:46: in __init__
    self.cbf_controller = con_config.get_device_proxy(self._tel.csp.cbf.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b0524c0>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
__________________ test_configure_scan_on_sdp_subarray_in_mid __________________

request = <FixtureRequest for <Function test_configure_scan_on_sdp_subarray_in_mid>>
_pytest_bdd_example = {}

    @pytest.mark.usefixtures(*args)
    def scenario_wrapper(request, _pytest_bdd_example):
        scenario = templated_scenario.render(_pytest_bdd_example)
>       _execute_scenario(feature, scenario, request)

.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario
    _execute_step_function(request, scenario, step, step_func)
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in _execute_step_function
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in <dictcomp>
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:581: in getfixturevalue
    fixturedef = self._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1062: in execute
    raise val.with_traceback(tb)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1126: in pytest_fixture_setup
    result = call_fixture_func(fixturefunc, request, kwargs)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:925: in call_fixture_func
    fixture_result = next(generator)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/fixtures.py:491: in fxt_telescope_context
    context.set_up_a_telescope_per_session()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:225: in set_up_a_telescope_per_session
    self.push_context_onto_session(
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:149: in push_context_onto_session
    return self._session_stack.enter_context(c_m)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_management/telescope_management.py:303: in running_telescope
    entry_point = configuration.get_entry_point()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_control/entry_points/configuration.py:47: in get_entry_point
    return entry_point_cls()
tests/resources/models/cbf_model/entry_point.py:378: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/cbf_model/entry_point.py:46: in __init__
    self.cbf_controller = con_config.get_device_proxy(self._tel.csp.cbf.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b0524c0>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
____________________ test_run_a_scan_on_sdp_subarray_in_mid ____________________

request = <FixtureRequest for <Function test_run_a_scan_on_sdp_subarray_in_mid>>
_pytest_bdd_example = {}

    @pytest.mark.usefixtures(*args)
    def scenario_wrapper(request, _pytest_bdd_example):
        scenario = templated_scenario.render(_pytest_bdd_example)
>       _execute_scenario(feature, scenario, request)

.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario
    _execute_step_function(request, scenario, step, step_func)
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in _execute_step_function
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in <dictcomp>
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:581: in getfixturevalue
    fixturedef = self._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1062: in execute
    raise val.with_traceback(tb)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1126: in pytest_fixture_setup
    result = call_fixture_func(fixturefunc, request, kwargs)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:925: in call_fixture_func
    fixture_result = next(generator)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/fixtures.py:491: in fxt_telescope_context
    context.set_up_a_telescope_per_session()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:225: in set_up_a_telescope_per_session
    self.push_context_onto_session(
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:149: in push_context_onto_session
    return self._session_stack.enter_context(c_m)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_management/telescope_management.py:303: in running_telescope
    entry_point = configuration.get_entry_point()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_control/entry_points/configuration.py:47: in get_entry_point
    return entry_point_cls()
tests/resources/models/cbf_model/entry_point.py:378: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/cbf_model/entry_point.py:46: in __init__
    self.cbf_controller = con_config.get_device_proxy(self._tel.csp.cbf.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b0524c0>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
_______________________ test_sdp_start_up_telescope_mid ________________________

request = <FixtureRequest for <Function test_sdp_start_up_telescope_mid>>
_pytest_bdd_example = {}

    @pytest.mark.usefixtures(*args)
    def scenario_wrapper(request, _pytest_bdd_example):
        scenario = templated_scenario.render(_pytest_bdd_example)
>       _execute_scenario(feature, scenario, request)

.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario
    _execute_step_function(request, scenario, step, step_func)
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in _execute_step_function
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:108: in <dictcomp>
    kwargs = {arg: request.getfixturevalue(arg) for arg in get_args(step_func)}
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:581: in getfixturevalue
    fixturedef = self._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1048: in execute
    fixturedef = request._get_active_fixturedef(argname)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef
    self._compute_fixture_value(fixturedef)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value
    fixturedef.execute(request=subrequest)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1062: in execute
    raise val.with_traceback(tb)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:1126: in pytest_fixture_setup
    result = call_fixture_func(fixturefunc, request, kwargs)
.venv/lib/python3.9/site-packages/_pytest/fixtures.py:925: in call_fixture_func
    fixture_result = next(generator)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/fixtures.py:491: in fxt_telescope_context
    context.set_up_a_telescope_per_session()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:225: in set_up_a_telescope_per_session
    self.push_context_onto_session(
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_fixtures/context_management.py:149: in push_context_onto_session
    return self._session_stack.enter_context(c_m)
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_management/telescope_management.py:303: in running_telescope
    entry_point = configuration.get_entry_point()
.venv/lib/python3.9/site-packages/ska_ser_skallop/mvp_control/entry_points/configuration.py:47: in get_entry_point
    return entry_point_cls()
tests/resources/models/cbf_model/entry_point.py:378: in __init__
    self.start_up_step = StartUpStep(self.nr_of_subarrays)
tests/resources/models/cbf_model/entry_point.py:46: in __init__
    self.cbf_controller = con_config.get_device_proxy(self._tel.csp.cbf.controller)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:56: in get_device_proxy
    factory = get_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:39: in get_factory
    return container.factory
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:196: in factory
    factory = determine_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/configuration.py:30: in determine_factory
    return get_remote_factory()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:27: in get_remote_factory
    return RemoteFactory(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remotefactory.py:41: in __init__
    self._tango_bridge = TangoBridge(bridge_factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/utils/singleton.py:35: in __call__
    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/tangobridge.py:52: in __init__
    self._rest_controller = RestController(factory)
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/restcontrol.py:52: in __init__
    authenticated_user = factory.get_new_authenticated_user()
.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/factories.py:161: in get_new_authenticated_user
    self._authenticated_user = authenticator.get_authenticated_user()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ska_ser_skallop.connectors.remoting.tangobridge.authentication.Authenticator object at 0x10b0524c0>

    def get_authenticated_user(self) -> AuthenticatedUser:
        """Return authenticated user values for gaining access to tango gql services.
    
        :raises AuthException: when authentication unsuccessful
        :return:  authenticated user values as a AuthenticatedUser object.
        """
        if self._credentials:
            if self._environment.tango_bridge_ip:
                host = self._environment.tango_bridge_ip
            else:
                host = self._environment.kubehost
            url = f"http://{host}/auth/login"
            try:
                result = requests.post(url, json=self._credentials.asdict())
            except requests.exceptions.ConnectionError as exception:
                raise AuthException(
                    f"Unable to authenticate on {url} as connection is not available"
                ) from exception
            if result.status_code != 200:
>               raise AuthException(
                    f"Unable to authenticate on {url} message_code: "
                    f"{result.status_code}"
                )
E               ska_ser_skallop.connectors.remoting.tangobridge.authentication.AuthException: Unable to authenticate on http://192.168.64.60/auth/login message_code: 404

.venv/lib/python3.9/site-packages/ska_ser_skallop/connectors/remoting/tangobridge/authentication.py:65: AuthException
----- generated json file: /Users/aragorn/code/skampi/build/cucumber.json ------
------- generated xml file: /Users/aragorn/code/skampi/build/report.xml --------
--------------------------------- JSON report ----------------------------------
report saved to: build/report.json
=========================== short test summary info ============================
FAILED tests/integration/cbf/test_assign_resources.py::test_assign_resources_to_cbf_mid_subarray
FAILED tests/integration/cbf/test_start_up.py::test_cbf_start_up_telescope_mid
FAILED tests/integration/sdp/test_assign_resources.py::test_assign_resources_to_sdp_subarray_in_mid
FAILED tests/integration/sdp/test_configure_scan.py::test_configure_scan_on_sdp_subarray_in_mid
FAILED tests/integration/sdp/test_scan.py::test_run_a_scan_on_sdp_subarray_in_mid
FAILED tests/integration/sdp/test_start_up.py::test_sdp_start_up_telescope_mid
ERROR tests/integration/csp/test_assign_resources.py::test_assign_resources_to_csp_mid_subarray
ERROR tests/integration/csp/test_assign_resources.py::test_release_resources_to_csp_mid_subarray
ERROR tests/integration/csp/test_configure.py::test_configure_csp_mid_subarray
ERROR tests/integration/csp/test_scan.py::test_run_a_scan_on_csp_subarray_in_mid
ERROR tests/integration/csp/test_start_up.py::test_csp_start_up_telescope_mid
====== 6 failed, 3 skipped, 23 deselected, 73 warnings, 5 errors in 1.77s ======
