#!/usr/bin/env bash

# check bash version >= 4
bash_check=`echo "${BASH_VERSION}" | grep '^[456789]' 1>/dev/null 2>/dev/null; echo $?`
if [ $bash_check -ne 0 ]; then
  echo "metadata: you version of bash (${BASH_VERSION}) must be >=4.x"
  exit 1
fi

# Shellscript support function file for packaging metadata Make targets

# Find and load the release support script
CURRENT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
. ${CURRENT_SCRIPT_DIR}/.make-release-support

# metadata label helper function
function metadataLabel () {
    echo "${*}" >> ${METADATA_TEMPFILE}
}

# Generate metadata MANIFEST file
function metadataGenerate() {
    # Creates a metadata file named <METADATA_FILE_NAME> with runner, pipeline and build information
    #
    # Arguments:
    # $1: Metadata File Name to be created
    #
    # Usage:
    # metadataGenerate <METADATA_FILE_NAME>
    #
    # Example Usage:
    # metadataGenerate MANIFEST.skao.int
    #
    if [ -z "$1" ]
    then
        echo "metadataPatch: metadataGenerate: No target file specified - aborting!"
        exit 1
    else
        THE_MANIFEST="$1"
    fi

    if [ -z "$PROJECT" ]
    then
        PROJECT=$(basename $(pwd))
    else
        PROJECT=$PROJECT
    fi

    BASE=$(pwd)

    METADATA_TEMPFILE=$(mktemp /tmp/metadata.XXXXXX)

	# [[ -z "${PWD}" ]] && RELEASE_CONTEXT_DIR="" || RELEASE_CONTEXT_DIR="${PWD}/"
    if [ -z "$VERSION" ]
    then
        # VERSION=$(awk -F= '/^release=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
        VERSION=$(getRelease)
    fi

    metadataLabel "PROJECT=${PROJECT}"
    metadataLabel "VERSION=${VERSION}"

    while IFS='' read -r LINE || [ -n "${LINE}" ]; do
        if [[ $LINE == *"CI_COMMIT_AUTHOR"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_COMMIT_REF_NAME"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_COMMIT_REF_SLUG"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_COMMIT_SHA"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_COMMIT_SHORT_SHA"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_COMMIT_TIMESTAMP"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_JOB_ID"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_JOB_URL"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_PIPELINE_ID"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_PIPELINE_IID"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_PIPELINE_URL"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_PROJECT_ID"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_PROJECT_PATH_SLUG"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_PROJECT_URL"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_RUNNER_ID"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_RUNNER_REVISION"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"CI_RUNNER_TAGS"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"GITLAB_USER_NAME"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"GITLAB_USER_EMAIL"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"GITLAB_USER_LOGIN"* ]]; then
            metadataLabel $LINE
        fi
        if [[ $LINE == *"GITLAB_USER_ID"* ]]; then
            metadataLabel $LINE
        fi
    done <<< "$(printenv)"

    mv -f ${METADATA_TEMPFILE} ${THE_MANIFEST}
}

# Add metadata MANIFEST file to raw archive
function metadataPatch() {
    # Adds the metadata file to archive
    #
    # Arguments:
    # $1: Archive file
    # $2: Metadata file
    #
    # Supported archive types: zip, egg, whl, gz
    #
    # Usage:
    # .make-metadata-support ; metadataPatch <ARCHIVE_FILE> <METADATA_FILE_NAME>
    #
    # Example Usage:
    # # Create manifest file: extract-metadata.sh MANIFEST.skao.int
    # > .make-metadata-support ; metadataPatch python-package-0.1.2-py3-none-any.whl MANIFEST.skao.int


    base=$(pwd)
    echo "metadataPatch: working dir: ${base}"

    if [ -z "$1" ]; then
        echo "metadataPatch: No archive file specified - aborting!"
        exit 1
    fi
    # THE_ARCHIVE=$(readlink -f $1)
    THE_ARCHIVE="${base}/$1"

    if [ ! -f "${THE_ARCHIVE}" ]; then
        echo "metadataPatch: Archive does not exist: ${THE_ARCHIVE} - aborting."
        exit 1
    fi

    filename=$(basename -- "${THE_ARCHIVE}")
    extension="${filename##*.}"
    filename="${filename%.*}"
    directory=$(dirname -- "${THE_ARCHIVE}")
    fullfilename=${directory}"/"${filename}
    echo "metadataPatch: Archive is: ${THE_ARCHIVE} of type: ${extension}"

    if [ -z "$2" ]; then
        echo "metadataPatch: No metadata file specified - aborting!"
        exit 1
    else
        THE_METADATA="$2"
    fi

    if [ ! -f "${THE_METADATA}" ]; then
        echo "metadataPatch: Metadata file does not exist: ${THE_METADATA} - aborting."
        exit 1
    fi
    echo "metadataPatch: MANIFEST is: ${THE_METADATA}"


    # layout the metadata directory structure for the file type
    tmp_dir=$(mktemp -d -t metadata.XXXXXXXXXX)

    cur=$(pwd)
    echo "metadataPatch: current working dir: ${cur}"

    case "${extension,,}" in
        "zip") cp ${base}/${THE_METADATA} ${tmp_dir}/;;
        "egg") mkdir ${tmp_dir}/EGG-INFO; cp ${base}/${THE_METADATA} ${tmp_dir}/EGG-INFO/;;
        "whl") dist_info=$(unzip -l ${THE_ARCHIVE} | grep 'dist-info/WHEEL' | awk '{print $4}' | sed 's/\/WHEEL//'); mkdir ${tmp_dir}/${dist_info}; cp ${base}/${THE_METADATA} ${tmp_dir}/${dist_info}/;;
        "tgz");;
        "gz");;
        *) echo "metadataPatch: Unrecognised file type - aborting"; exit 1;;
    esac
    echo "metadataPatch: added manifest"

    if [ "${extension,,}" == "gz" ] || [ "${extension,,}" == "tgz" ]; then
        if [[ -n "$(tar -tzvf ${THE_ARCHIVE} | grep ${THE_METADATA})" ]]; then
            echo "metadataPatch: ${THE_METADATA} already exists, skipping add"
        else
            cd ${base}
            gunzip ${THE_ARCHIVE}
            tar -rf ${fullfilename} ${THE_METADATA}
            gzip -f ${fullfilename} > ${THE_ARCHIVE}
        fi
    else
        cd ${tmp_dir}
        echo working on ${tmp_dir}
        zip -ur ${THE_ARCHIVE} *
    fi
    echo "metadataPatch: repacked ${THE_ARCHIVE}"
    rm -rf ${tmp_dir}
    echo "metadataPatch: done"
    cd ${base}
}
