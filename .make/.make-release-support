#!/usr/bin/env bash
#
#   Copyright 2015  Xebia Nederland B.V.
#   Modifications copyright (c) 2019 SKA Organisation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# call the generate-chglog script
function generateChangelog() {

	# check if jq is installed
	which jq >/dev/null 2>&1 || (echo "jq not installed - see https://stedolan.github.io/jq/"; exit 1;)

	# Check if Jira ticket exists in the tag commit

	getJiraTicketFromCommit

	generateRelaseNotes

	generateReleaseAssets

	# Publish the release notes
	publishTagReleaseNotes

	# Rename CHANGELOG.ska.md to CHANGELOG.md
	mv CHANGELOG.ska.md $CHANGELOG_FILE

	# Update Jira ticket with new releases
	if [[ ! -z  JIRA_TICKET ]]; then
		updateJiraTicket
	fi

}

function generateRelaseNotes() {
	# Check if configuration files exist in the expected location
	if [[ ! -f $CHANGELOG_CONFIG ]] ; then
		CHANGELOG_CONFIG=".make/.chglog/config.yml"
	fi

	if [[ ! -f $CHANGELOG_TEMPLATE ]] ; then
		CHANGELOG_TEMPLATE=".make/.chglog/CHANGELOG.tpl.md"
	fi

	# Generate the release notes for the current TAG
	CHANGELOG_CONFIG=$CHANGELOG_CONFIG \
	CHANGELOG_TEMPLATE=$CHANGELOG_TEMPLATE \
	JIRA_URL=$JIRA_URL \
	JIRA_USERNAME=$JIRA_USERNAME \
	JIRA_PASSWORD=$JIRA_PASSWORD \
	generateTagReleaseNotes

	# Read author notes for each version from existing CHANGELOG.md and insert back 
	# into CHANGELOG.ska.md generated above. CHANGELOG.ska.md gets deleted here only if running 
	# `make generate-release-notes`
	python3 ./.make/resources/extractAndInsertAuthorNotes.py $CHANGELOG_FILE CHANGELOG.ska.md
	if [ "$EXECUTED_FROM_MAKE_TARGET" = true ]; then
		mv CHANGELOG.ska.md $CHANGELOG_FILE
	fi
}

function getJiraTicketFromCommit() {

	pat='([A-Z][A-Z0-9_]+-)[0-9]+' # Pattern to get the Jira ticket

	[[ $CI_COMMIT_MESSAGE =~ $pat ]]

	JIRA_TICKET=${BASH_REMATCH[0]}

	echo "$JIRA_TICKET"
}

function addFeaturesToChangelogFile(){
	# Remove first line that contains the tag version
	sed -i '1d' CHANGELOG.ska.md

	# Add Line to Have a pretty output
	sed -i "1s/^/ \n/" CHANGELOG.ska.md

	# Get Jira tickets from CHANGELOG.ska.md File
	LIST_JIRA_FROM_TAG=$(sed -n "/$CI_COMMIT_TAG/,/^Commits/{p;/Commits/q}" CHANGELOG.ska.md | awk -F'[ ]' '{print $2}')

	# Set variable to enter the while loop at least one time
	JIRA_TICKET_FROM_TAG="FIRST_SEARCH"

	# Create Array for features
	FEATURE_ARRAY=()

	# Issue links with relation Parent/Child (id = 10800 )
	ISSUE_LINK_PARENT_CHILD=10800

	while [[ $JIRA_TICKET_FROM_TAG != "" ]]; do

		[[ $LIST_JIRA_FROM_TAG =~ $pat ]]

		JIRA_TICKET_FROM_TAG=${BASH_REMATCH[0]}

		if [[ $JIRA_TICKET_FROM_TAG != "" ]]; then

			LIST_JIRA_FROM_TAG=$(echo $LIST_JIRA_FROM_TAG | sed "s/$JIRA_TICKET_FROM_TAG//")

			# Curl to get Issue links from Jira tickets
			curl_response=$(curl -s -u $JIRA_USERNAME:$JIRA_PASSWORD  --request GET -H "Content-Type: application/json" https://jira.skatelescope.org/rest/api/2/issue/$JIRA_TICKET_FROM_TAG?fields=issuelinks)


			LIST_FEATURE_KEY=$(echo $curl_response | jq -c  "[.fields.issuelinks[] | select(.type.id==\"$ISSUE_LINK_PARENT_CHILD\" and .inwardIssue.key!=null)  .inwardIssue.key + \" - \" + .inwardIssue.fields.summary ]")
			mapfile -t LIST_FEATURE_ARRAY <<< $(echo $LIST_FEATURE_KEY | jq '.[]' | tr -d '"')


			if [[ ! -z $LIST_FEATURE_KEY ]]; then
				# IF more then 1 Feature as Parent they come as multiple lines, loop though all the lines
				for FEATURE_KEY_SUMMARY in "${LIST_FEATURE_ARRAY[@]}"
				do
					# Needed for cases where the Jira ticket is Parent instead of a Child
						if [[ ! " ${FILE_FEATURE_ARRAY[*]} " =~ "$FEATURE_KEY_SUMMARY" ]]; then
							FILE_FEATURE_ARRAY+=("$FEATURE_KEY_SUMMARY")
							sed -i "1s~^~- $FEATURE_KEY_SUMMARY \n~" CHANGELOG.ska.md
						fi

				done
			fi

		fi
	done

	# Add Features Title
	sed -i "1s/^/### Features \n \n/" CHANGELOG.ska.md
	# Re Add first line that contains the tag version
	sed -i "1s/^/## [$CI_COMMIT_TAG] \n \n/" CHANGELOG.ska.md
	# fi

}

function generateTagReleaseNotes() {
	# Generate the release notes for the current TAG
	git-chglog \
		--config="$CHANGELOG_CONFIG" \
		--template="$CHANGELOG_TEMPLATE" \
		--repository-url="$CI_PROJECT_URL" \
		--jira-url="$JIRA_URL" \
		--jira-username="$JIRA_USERNAME" \
		--jira-token="$JIRA_PASSWORD" \
		-o CHANGELOG.ska.md $CI_COMMIT_TAG | grep -Ev "^$|Failed to parse Jira story"
		git_chglog=$(echo $?)
	if [ $git_chglog -ne 0 ];
	then
		echo "git-chglog: failed - abort"
		return $git_chglog
	fi

	addFeaturesToChangelogFile
}


function generateDockerAssets(){

	## For case in which the Dockerfile is in the root folder
	if [ -f Dockerfile ] ; then
		VERSION=$(awk -F= '$1=="release" {print $2}' .release 2>/dev/null)
		NAME="$CI_PROJECT_NAME:$VERSION"
		ASSETS_LINKS=$(printf "$ASSETS_TEMPLATE" "OCI-$NAME" "https://artefact.skao.int/#browse/browse:docker-internal:v2%2F$CI_PROJECT_NAME%2Ftags%2F$VERSION")
		RELEASE_CLI_COMMAND="$RELEASE_CLI_COMMAND --assets-link=$ASSETS_LINKS"
	else
		## Get all versions and Names of the OCI IMAGES
		if [[ ! -z "$OCI_IMAGES_TO_PUBLISH" ]]; then
		for i in $OCI_IMAGES_TO_PUBLISH
		do
			VERSION=$(awk -F= '$1=="release" {print $2}' images/$i/.release 2>/dev/null)
			NAME="$i:$VERSION"
			ASSETS_LINKS=$(printf "$ASSETS_TEMPLATE" "OCI-$NAME" "https://artefact.skao.int/#browse/browse:docker-internal:v2%2F$i%2Ftags%2F$VERSION")
			RELEASE_CLI_COMMAND="$RELEASE_CLI_COMMAND --assets-link=$ASSETS_LINKS"
		done
		fi
	fi
}

function generateHelmAssets(){

	## Get all versions and Names of the HELM CHARTS
	if [[ ! -z "$HELM_CHARTS_TO_PUBLISH" ]]; then
		for i in $HELM_CHARTS_TO_PUBLISH
		do
			VERSION=$(awk '/^version:/{print $2}' charts/$i/Chart.yaml 2>/dev/null)
			NAME="$i:$VERSION"
			ASSETS_LINKS=$(printf "$ASSETS_TEMPLATE" "HLM-$NAME" "https://artefact.skao.int/#browse/browse:helm-internal:$i%2F$VERSION")
			RELEASE_CLI_COMMAND="$RELEASE_CLI_COMMAND --assets-link=$ASSETS_LINKS"
		done
	fi

}

function generatePythonAssets(){

	## Just add Python as an asset if gitlab-ci includes python publish job
	if  [[ $(cat $CI_CONFIG_PATH) =~ "gitlab-ci/includes/python-publish.gitlab-ci.yml" ]] || [[ $(cat $CI_CONFIG_PATH) =~ "gitlab-ci/includes/python.gitlab-ci.yml" ]] ; then
		## Get versions from Python pyproject.toml
		if [[ -f pyproject.toml ]]; then
			VERSION=$(poetry version --short)
			NAME=$CI_PROJECT_NAME:$VERSION
			ASSETS_LINKS=$(printf "$ASSETS_TEMPLATE" "PYT-$NAME" "https://artefact.skao.int/#browse/browse:pypi-internal:$CI_PROJECT_NAME%2F$VERSION")
			RELEASE_CLI_COMMAND="$RELEASE_CLI_COMMAND --assets-link=$ASSETS_LINKS"
		else
			if [[ -f setup.py ]]; then
				VERSION=$(python setup.py --version)
				NAME=$CI_PROJECT_NAME:$VERSION
				ASSETS_LINKS=$(printf "$ASSETS_TEMPLATE" "PYT-$NAME" "https://artefact.skao.int/#browse/browse:pypi-internal:$CI_PROJECT_NAME%2F$VERSION")
				RELEASE_CLI_COMMAND="$RELEASE_CLI_COMMAND --assets-link=$ASSETS_LINKS"
			fi
		fi
	fi

}


function generateRawAssets(){

	## Get versions from Raw packages
	if [[ ! -z "$RAW_PKGS_TO_PUBLISH" ]]; then
		VERSION=$(awk -F= '$1=="release" {print $2}' .release 2>/dev/null)
		for i in $RAW_PKGS_TO_PUBLISH
		do
			NAME="$i:$VERSION"
			ASSETS_LINKS=$(printf "$ASSETS_TEMPLATE" "RAW-$NAME" "https://artefact.skao.int/#browse/browse:raw-internal:$i-$VERSION.tar.gz")
			RELEASE_CLI_COMMAND="$RELEASE_CLI_COMMAND --assets-link=$ASSETS_LINKS"
		done
	fi

}

# Send a message to $SLACK_RELEASE_CHANNEL about the new release
# Note: This function does not fail to not mark the pipeline as failure
function sendSlackMessage(){

	# Debug variables
	# CI_PROJECT_URL=https://gitlab.com/ska-telescope/templates/ska-raw-skeleton
	# CI_PROJECT_NAME=ska-raw-skeleton
	# CI_COMMIT_TAG=0.0.200
	# GITLAB_USER_LOGIN=gitlab_user
	# CI_SERVER_URL=https://gitlab.com
	# GITLAB_USER_EMAIL=mails@ska.pt


	slack_message=$(cat <<- BLOCK
	{
		"channel": "C02MDNMPWKF",
		"unfurl_links": false,
		"unfurl_media": false,
		"blocks": [
			{
				"type": "section",
				"text": {
					"type": "mrkdwn",
					"text": ":rotating_light: *New Release from <https://google.com|PROJECT>*"
				}
			}
		]
	}
	BLOCK
	)

	secondString=" "

	array=("${RELEASE_CLI_COMMAND//--assets-link=/$secondString}")

	# Slack Channel
	slack_message=$(echo $slack_message | jq '.channel = "'${SLACK_RELEASE_CHANNEL}'"')

	# add project name and version to header
	slack_message=$(echo $slack_message | jq '.blocks[0].text.text = ":rocket: *New Release from <'$CI_PROJECT_URL'|'${CI_PROJECT_NAME}'>: <'$CI_PROJECT_URL'/-/releases/'$CI_COMMIT_TAG'|'$CI_COMMIT_TAG'>*"')

	# send main message

	# echo $slack_message | jq "."
	response=$(curl \
		-qSfsw '\n%{http_code}' \
		-H "Content-type: application/json" \
		-d "$(echo $slack_message)" \
		-H "Authorization: Bearer $MARVIN_SLACK_TOKEN" \
		-X POST https://slack.com/api/chat.postMessage
	)

	# Get the exit code of the curl command to capture failure
	exit_status_curl=$?


	if [[ $exit_status_curl -eq 0 ]];
	then

		ok=$(echo $response | jq '.ok')
		error=$(echo $response | jq -r '.error')
		thread_id=$(echo $response | jq -r '.ts')

		if [[ "$ok" = true ]];
		then
			echo "✅ Slack message sent!"

		else
			echo "❌ Slack Error:" $error
			return 0
		fi

	else
		echo "❌ Curl Failed, Exit Code:" $exit_status_curl
		return 0
	fi


	thread_message=$(cat <<- BLOCK
	{
		"channel": "C02MDNMPWKF",
		"thread_ts": "12345",
		"unfurl_links": false,
		"unfurl_media": false,
		"blocks": [
			{
				"type": "section",
				"fields": [
					{
						"type": "mrkdwn",
						"text": "*Author*"
					},
					{
						"type": "mrkdwn",
						"text": "Sundays"
					}
				]
			},
			{
				"type": "divider"
			},
			{
				"type": "section",
				"text": {
					"type": "mrkdwn",
					"text": "*Artefacts*"
				}
			}
		]
	}
	BLOCK
	)

	# Slack Channel
	thread_message=$(echo $thread_message | jq '.channel = "'${SLACK_RELEASE_CHANNEL}'"')

	# Slack Thread
	thread_message=$(echo $thread_message | jq '.thread_ts = "'${thread_id}'"')

	# AUTHOR
	thread_message=$(echo $thread_message | jq --arg v "<$CI_SERVER_URL/"$GITLAB_USER_LOGIN"|$GITLAB_USER_NAME> $GITLAB_USER_EMAIL" '.blocks[0].fields[1].text = $v')

	revlist=
	for i in $array
	do
		revlist="$i $revlist"
	done

	# dependencies
	index=0
	block=2
	for element in $revlist
	do
		if [ "$index" -eq "0" ]; then
			thread_message=$(echo $thread_message | jq '.blocks['$block'].type = "section"')
		fi

		name=$(echo $element | jq -r '.name')

		#OCI
		name=("${name//OCI-/:oci: }")

		#helm
		name=("${name//HLM-/:helm: }")

		#python
		name=("${name//PYT-/:python3: }")

		#raw
		name=("${name//RAW-/:package: }")

		#conan
		name=("${name//CNN-/:conan: }")


		url=$(echo $element | jq -r '.url')
		toAdd='{ "type": "mrkdwn","text": "<'${url}'|'${name}'>"}'

		thread_message=$(echo $thread_message | jq --argjson v "$toAdd" '.blocks['$block'].fields += [$v]')

		index=$((index+1))
		if [ "$index" -eq "10" ]; then
			index=0
			block=$((block+1))

		fi
	done

	echo $thread_message | jq "."
	response=$(curl \
		-qSfsw '\n%{http_code}' \
		-H "Content-type: application/json" \
		-d "$(echo $thread_message)" \
		-H "Authorization: Bearer $MARVIN_SLACK_TOKEN" \
		-X POST https://slack.com/api/chat.postMessage
	)

	# Get the exit code of the curl command to capture failure
	exit_status_curl=$?


	if [[ $exit_status_curl -eq 0 ]];
	then

		ok=$(echo $response | jq '.ok')
		error=$(echo $response | jq -r '.error')

		if [[ "$ok" = true ]];
		then
			echo "✅ Thread message sent!"
		else
			echo "❌ Thread Error:" $error
		fi

	else
		echo "❌ Thread Curl Failed, Exit Code:" $exit_status_curl
	fi
}


function generateConanAssets(){

	## Get versions from Conan packages
	if [[ ! -z "$CONAN_PKGS_TO_PUBLISH" ]]; then
		for CONAN_PKG in $CONAN_PKGS_TO_PUBLISH
		do
			CONANFILE_INFO=$(conan info ./conan/$CONAN_PKG/conanfile.py -n None | awk -F"conanfile.py " '{print $2}')
			NAME=$(echo $CONANFILE_INFO | awk -F/ '{print $1}' | tr -d "(")
			VERSION=$(echo $CONANFILE_INFO | awk -F/ '{print $2}' | tr -d ")")
			ASSETS_LINKS=$(printf "$ASSETS_TEMPLATE" "CNN-$NAME:$VERSION" "https://artefact.skao.int/#browse/browse:conan-internal:$CONAN_USER%2F$NAME%2F$VERSION-$CONAN_CHANNEL")
			RELEASE_CLI_COMMAND="$RELEASE_CLI_COMMAND --assets-link=$ASSETS_LINKS"
		done
	fi

}



function generateReleaseAssets(){
	## Template for release assets
	ASSETS_TEMPLATE='{"name":"%s","url":"%s"}'

	echo "🔨 Generate Docker Assets"
	generateDockerAssets

	echo "🔨 Generate Helm Assets"
	generateHelmAssets

	echo "🔨 Generate Python Assets"
	generatePythonAssets

	echo "🔨 Generate Raw Assets"
	generateRawAssets

	echo "🔨 Generate Conan Assets"
	generateConanAssets

	echo "📩 Sending Slack Message"
	sendSlackMessage
}


function publishTagReleaseNotes() {
	# Publish the release notes
	echo "📡  Publishing release notes..."

	release-cli \
		--server-url="$CI_SERVER_URL" \
		--job-token="$CI_JOB_TOKEN" \
		--project-id="$CI_PROJECT_ID" create \
		--name="$CI_COMMIT_TAG" \
		--tag-name="$CI_COMMIT_TAG" \
		$RELEASE_CLI_COMMAND \
		--description=CHANGELOG.ska.md
}

function addJiraIssueLink(){

	## Add Issue link to the Ticket
	curl_result=$(curl -D- -u $JIRA_USERNAME:$JIRA_PASSWORD  -X POST --data $ISSUE_LINK_DATA \
	-H "Content-Type: application/json" \
	https://jira.skatelescope.org/rest/api/latest/issue/$JIRA_TICKET/remotelink)

	[[ $curl_result =~ '202' ]]

	if [[ -z  ${BASH_REMATCH[0]} ]]; then
		echo "❗ IT WAS NOT POSSIBLE TO UPDATE THE JIRA TICKET ISSUE LINK ❗. ERROR : $curl_result"

	fi
}

function generateJiraReleaseNotesField(){

	## Get release notes field to a
	curl_response=$(curl -u $JIRA_USERNAME:$JIRA_PASSWORD  --request GET -H "Content-Type: application/json" https://jira.skatelescope.org/rest/api/2/issue/$JIRA_TICKET?fields=customfield_14178)

	## Parse to get Value from ticket

	JIRA_RELEASE_NOTES_VALUE=$(echo $curl_response | jq '.fields.customfield_14178' | tr -d '"')

	if [[ $JIRA_RELEASE_NOTES_VALUE == null ]]; then
		JIRA_RELEASE_NOTES_VALUE=" "
	fi

	RELEASE_NOTES_DATA=$(printf "$RELEASE_NOTES_TEMPLATE" "$CI_PROJECT_NAME:$CI_COMMIT_TAG" "$RELEASE_URL" "$JIRA_RELEASE_NOTES_VALUE")

}

function addJiraReleaseNotesFields(){

	curl_result=$(curl -D- -u $JIRA_USERNAME:$JIRA_PASSWORD  -X PUT --data "$RELEASE_NOTES_DATA"  -H "Content-Type: application/json" https://jira.skatelescope.org/rest/api/2/issue/$JIRA_TICKET)

	[[ $curl_result =~ '202' ]]

	if [[ -z  ${BASH_REMATCH[0]} ]]; then
		echo "❗IT WAS NOT POSSIBLE TO UPDATE THE JIRA REL TICKET's REMOTE NOTES FIELD ❗. ERROR : $curl_result"
	fi
}

function updateJiraTicket(){

	echo "💬  Updating Jira Ticket $JIRA_TICKET ..."

	# Template to update Remote issue links on Jira Tickets
	# https://developer.atlassian.com/server/jira/platform/jira-rest-api-for-remote-issue-links/

	ISSUE_LINK_TEMPLATE='{"object":{"url":"%s","title":"%s"}}'

	# Template to update the Release Notes Field from REL tickets
	# https://developer.atlassian.com/server/jira/platform/jira-rest-api-examples/

	RELEASE_NOTES_TEMPLATE='{"fields":{"customfield_14178":"(i) [%s|%s] \\n \\n%s"}}'

	RELEASE_URL="https://gitlab.com/$CI_PROJECT_PATH/-/releases/$CI_COMMIT_TAG"

	ISSUE_LINK_DATA=$(printf "$ISSUE_LINK_TEMPLATE" "$RELEASE_URL" "$CI_PROJECT_NAME:$CI_COMMIT_TAG")



	# Update Jira Issue Link with new Release

	addJiraIssueLink

	[[ $JIRA_TICKET =~ 'REL' ]]

	# If REL is present in the JIRA_TICKET Name
	if [[ ! -z  ${BASH_REMATCH[0]} ]]; then


		# Generate Jira Release Notes Field
		echo "🔁 Generating Release Notes Field 🔁"
		generateJiraReleaseNotesField

		# Update Jira Ticket's Release Notes Field
		echo "🟢 Updating Release Notes Field 🟢"
		addJiraReleaseNotesFields

	fi


}


# set the release context directory helper
function setContextHelper() {
	if [[ -z "${RELEASE_CONTEXT_DIR}" ]]; then
		if [[ -z "${PWD}" ]]; then
			RELEASE_CONTEXT_DIR=""
		else
			RELEASE_CONTEXT_DIR="${PWD}/"
		fi
	fi
	export RELEASE_CONTEXT_DIR=${RELEASE_CONTEXT_DIR}/
}
# run once for everything
setContextHelper

# If there are outstanding changes, print them out in a collapsed section to STDERR
function print_outstanding_changes() {
	if [[ $1 -eq 0 ]]; then
		echo "🔥  There are outstanding changes in the repository which causes the release to be dirty 🔥"
		collapsed_gitlab_section "dirty_release" "Outstanding Changes (git status -s)" "git status -s | grep -v -E '^\?\? ' | grep -v -E '.release|Chart.yaml|pyproject.toml'"
	fi
} 1>&2

function hasChanges() {
	# this is a release commit message check
	if [[ "$1" == "RELEASE_CHECK" ]]; then
		test -n "$(git status -s | grep -v -E '^\?\? ' | grep -v -E '.release|Chart.yaml|pyproject.toml')"
		hc_result=$?
		print_outstanding_changes $hc_result
		return $hc_result
	fi
	# this is when we want to do dirty debugging
	if [[ -n "${DEBUG_DIRTY}" ]]; then
		return 0
	fi
	# normal case
	test -n "$(git status -s | grep -v -E '^\?\? ')"
	hc_result=$?

	print_outstanding_changes $hc_result
	return $hc_result
}


function getRelease() {
	awk -F= '/^release=/{print $2}' ${RELEASE_CONTEXT_DIR}.release 2>/dev/null
}

function getBaseTag() {
	sed -n -e "s/^tag=\(.*\)$(getRelease)\$/\1/p" ${RELEASE_CONTEXT_DIR}.release 2>/dev/null
}

function getTag() {
	if [ -z "$1" ] ; then
		tag=$(awk -F= '/^tag=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
		tag=${tag:-$(getRelease)}
	else
		echo "$(getBaseTag)$1"
	fi
}

# set the .release file release values
function setRelease() {
	if [ -n "$1" ] ; then
		sed -i.x -e "s/^release=.*/release=$1/g" ${RELEASE_CONTEXT_DIR}.release
		sed -i.x -e "s/^tag=.*/tag=$(getTag $1)/" ${RELEASE_CONTEXT_DIR}.release
		rm -f  ${RELEASE_CONTEXT_DIR}.release.x
		runPreTagCommand "$1"
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

# set the Helm Chart release
function setHelmRelease() {
	if [ -n "$1" ] ; then
		for cht in $2
		do
			if [[ -f "charts/$cht/Chart.yaml" ]]; then
				sed -i.x -e "s/^version:.*/version: $1/g" charts/$cht/Chart.yaml
				sed -i.x -e "s/^appVersion:.*/appVersion: $1/g" charts/$cht/Chart.yaml
			fi
		done
		rm -f charts/*/Chart.yaml.x
		runPreTagCommand "$1"
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

function runPreTagCommand() {
	if [ -n "$1" ] ; then
		COMMAND=$(sed -n -e "s/@@RELEASE@@/$1/g" -e 's/^pre_tag_command=\(.*\)/\1/p'  ${RELEASE_CONTEXT_DIR}.release)
		if [ -n "$COMMAND" ] ; then
			if ! OUTPUT=$(bash -c "$COMMAND" 2>&1) ; then echo $OUTPUT >&2 && exit 1 ; fi
		fi
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

function updateHelmDeps() {
	if [ -n "$1" ] ; then
		for chart in $2
		do
		helm_chart_deps_to_update=`grep -R file://.*${chart} charts/ | awk '{sub(":", "", $1); print $1}'`
			for dep_chart in ${helm_chart_deps_to_update}
			do
				echo "update-chart-versions: updating $chart dependency in $dep_chart to $1"
				dep_to_update=`yq e '.dependencies[]  | select(.repository == "file://*'$chart'") | .name' $dep_chart`
				sed -i.x -e "N;s/\(name: ${dep_to_update}.*version:\).*/\1 $1/;P;D" $dep_chart
				rm -f $dep_chart.x
			done
		done
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

function updateReleaseDoc() {
	if [ -n "$1" ] ; then
		conf_file="docs/src/conf.py"
		if [[ -f "$conf_file" ]]; then
			echo "update-conf-doc: updating conf.py version and release to $1"
			sed -i.x -e "s/^version =.*/version = \'$1\'/g" $conf_file
			sed -i.x -e "s/^release =.*/release = \'$1\'/g" $conf_file
		fi
		rm -f "$conf_file.x"
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

function targetExists(){
	make -n $1 &> /dev/null
}

function tagExists() {
	tag=${1:-$(getTag)}
	test -n "$tag" && test -n "$(git tag | grep "^$tag\$")"
}

function differsFromRelease() {
	tag=$(getTag)
	! tagExists $tag || test -n "$(git diff --shortstat -r $tag .)"
}

function getVersion() {
	result=$(getRelease)

	#MDC 14092019 the release support must be reviewed
	#if differsFromRelease; then
	#	result="$result-$(git log -n 1 --format=%h .)"
	#fi

	# Ignore dirty version - for local debug
	if $IGNORE_DIRTY; then
		echo $result
		return
	fi

	if hasChanges "RELEASE_CHECK" ; then
		result="$result-dirty"
	fi
	echo $result
}

# calculate the next patch version
function nextPatchLevel() {
	version=${1:-$(getRelease)}
	major_and_minor=$(echo $version | cut -d. -f1,2)
	patch=$(echo $version | cut -d. -f3)
	version=$(printf "%s.%d" $major_and_minor $(($patch + 1)))
	echo $version
}

# calculate the next minor version
function nextMinorLevel() {
	version=${1:-$(getRelease)}
	major=$(echo $version | cut -d. -f1);
	minor=$(echo $version | cut -d. -f2);
	version=$(printf "%d.%d.0" $major $(($minor + 1))) ;
	echo $version
}

# calculate the next major version
function nextMajorLevel() {
	version=${1:-$(getRelease)}
	major=$(echo $version | cut -d. -f1);
	version=$(printf "%d.0.0" $(($major + 1)))
	echo $version
}

# Get tag description given in ..release file
function getTagDescription(){
	awk -F= '/^tag_description=/{print $2}' ${RELEASE_CONTEXT_DIR}.release
}

# Create tag
function createGitTag(){
	tag=$(awk -F= '/^tag=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	tag=${tag:-$(getRelease)}
	echo $tag
	description=$(getTagDescription)
	git tag -a "$tag" -m "$description"
}

# Publish tag. (If there is error while publishing tag, docker image with same tag will be deleted.)
function gitPush() {
	tag=$(awk -F= '/^tag=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	git_username=$1
	private_token=$PRIVATE_TOKEN
	echo $tag
	$(git push https://"$git_username":"$private_token"@gitlab.com/ska-telescope/ska-skampi.git "$tag")
	gp_result=$(echo $?)
	if [ $gp_result -ne 0 ];
	then
		echo "DID NOT WORK"
		# deleteImageFromCAR
	fi
}

# Get release notes for SKAMPI-release from ${RELEASE_CONTEXT_DIR}.release file.
function getReleaseDescription(){
	awk -F= '/^release_notes=/{print $2}' ${RELEASE_CONTEXT_DIR}.release
}

# Create GitLab release for CentralNode with version given in ${RELEASE_CONTEXT_DIR}.release file
function releaseCN() {
	name=$(getRelease)
	tag_name=$(getRelease)
	release_notes=$(getReleaseDescription)
	private_token=$(awk -F= '/^private_token=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	data1=('{ "name": "'$name'", "tag_name": "'$tag_name'", "description": "'"$release_notes"'"}')
	rcn_result=$(curl --header 'Content-Type: application/json' \
					--header  "PRIVATE-TOKEN: "$private_token \
					--data "$data1" \
					--request POST https://gitlab.com/api/v4/projects/"$CI_PROJECT_ID"/releases)
	echo $rcn_result
}

# Delete released centralnode with version given in ${RELEASE_CONTEXT_DIR}.release file
function deleteCNRelease() {
	tag_name=$(getRelease)
	private_token=$(awk -F= '/^private_token=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	target="https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/"$tag_name
	dcnr_result=$(curl --request DELETE --header "PRIVATE-TOKEN: "$private_token "$target")
	echo $dcnr_result
}

function deleteTag() {
	tag=$(awk -F= '/^tag=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	git_username=$(awk -F= '/^gitlab_username=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	private_token=$(awk -F= '/^private_token=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	git push --delete https://"$git_username":"$private_token"@gitlab.com/ska-telescope/ska-tmc-centralnode-mid.git "$tag"
}

# Create GitLab release centralnode with version given in ${RELEASE_CONTEXT_DIR}.release file.
# If there is an error while creating GitLab release, published tag and docker (with same version number) image will be deleted.)
function releaseCNIfNoError() {
	tag_name=$(getRelease)
	private_token=$(awk -F= '/^private_token=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	echo "CHECKING IF THIS RELEASE ALREADY EXISTS. IF IT DOES NOT EXISTS, IT WILL GIVE KeyError: 'tag_name' (EXPECTED BEHAVIOUR)."
	releaseAlreadyExists=$(curl --header "PRIVATE-TOKEN: "$private_token "https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/""$tag_name" | \
	python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")
	if [ "$releaseAlreadyExists" == "$tag_name" ]
	then
		echo "THIS RELEASE IS ALREADY EXISTS. NEW RELEASE WITH SAME VERSION IS NOT POSSIBLE."
	else
		echo "RELEASING CENTRALNODE..."
		releaseCN
		checkReleaseExists=$(curl --header "PRIVATE-TOKEN: "$private_token "https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/""$tag_name" | \
		python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")
		if [ "$checkReleaseExists" != "$tag_name" ]; then
			echo "ERROR WHILE RELEASING CENTRALNODE. TAG AND IMAGE WILL BE DELETED."
			deleteTag
			deleteImageFromNexus
		fi
	fi
}

# Create GitLab release for SKAMPI-prototype with version given in ${RELEASE_CONTEXT_DIR}.release file
function releaseSKAMPI() {
	name=$(getRelease)
	echo "NAME = $name"
	tag_name=$(getTag)
	echo "TAG_NAME = $tag_name"
	release_notes=$(getReleaseDescription)
	echo "RELEASE NOTES = $release_notes"
	private_token=$PRIVATE_TOKEN
	data1=('{ "name": "'$name'", "tag_name": "'$tag_name'", "description": "'"$release_notes"'"}')
	rs_result=$(curl --header 'Content-Type: application/json' \
				--header  "PRIVATE-TOKEN: "$private_token \
				--data "$data1" \
				--request POST https://gitlab.com/api/v4/projects/"$CI_PROJECT_ID"/releases)
	echo "result = $rs_result"
}

# Delete released SKAMPI-prototype with version given in ${RELEASE_CONTEXT_DIR}.release file
function deleteSKAMPIRelease() {
	tag_name=$(getTag)
	private_token=$PRIVATE_TOKEN
	target="https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/"$tag_name
	drs_result=$(curl --request DELETE --header "PRIVATE-TOKEN: "$private_token "$target")
	echo $drs_result
}

function deleteTag() {
	tag=$(awk -F= '/^tag=/{print $2}' ${RELEASE_CONTEXT_DIR}.release)
	git_username=$1
	private_token=$PRIVATE_TOKEN
	git push --delete https://"$git_username":"$private_token"@gitlab.com/ska-telescope/ska-skampi.git "$tag"
}

# Create GitLab release SKAMPI with version given in ${RELEASE_CONTEXT_DIR}.release file.
# If there is an error while creating GitLab release, published tag and docker (with same version number) image will be deleted.)
function releaseSKAMPIIfNoError() {
	tag_name=$(getTag)
	private_token=$PRIVATE_TOKEN
	echo "CHECKING IF THIS RELEASE ALREADY EXISTS. IF IT DOES NOT EXISTS, IT WILL GIVE KeyError: 'tag_name' (EXPECTED BEHAVIOUR)."
	releaseAlreadyExists=$(curl --header "PRIVATE-TOKEN: "$private_token "https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/""$tag_name" | \
	python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")
	if [ "$releaseAlreadyExists" == "$tag_name" ]
	then
		echo "THIS RELEASE IS ALREADY EXISTS. NEW RELEASE WITH SAME VERSION IS NOT POSSIBLE."
	else
		echo "RELEASING SKAMPI..."
		releaseSKAMPI
		checkReleaseExists=$(curl --header "PRIVATE-TOKEN: "$private_token "https://gitlab.com/api/v4/projects/""$CI_PROJECT_ID""/releases/""$tag_name" | \
		python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")
		if [ "$checkReleaseExists" != "$tag_name" ]; then
			echo "ERROR WHILE RELEASING SKAMPI. TAG WILL BE DELETED."
			git_username=$1
			deleteTag $git_username
		fi
	fi
}

#TODO: may be required if gitCommitPush gets executed after a commit was pushed to master - tagged commit may then be behind master
# function gitFetchPull() {
# 	git_username=$1
#     git remote add origin-push $(git config remote.origin.url)
#     git fetch origin-push
#     $(git pull origin-push master)
# 	result=$(echo $?)
# 	if [ $result -ne 0 ];
# 	then
# 		echo "DID NOT WORK"
# 		return $result
# 	fi
# }

# Commit next version to master
function gitCommitPush() {
	for CHART in charts/*/Chart.yaml; do
		git add $CHART
		echo "Adding $CHART to git history."
	done
	git commit -m "Setting next development versions"
	# echo "USERNAME: $USERNAME"
	git_username=$1
	# echo "\$git_username: $git_username - this should be the same as previous line"
	private_token=$PRIVATE_TOKEN
	$(git push https://"$git_username":"$private_token"@gitlab.com/ska-telescope/ska-skampi.git HEAD:master)
	gcp_result=$(echo $?)
	if [ $gcp_result -ne 0 ];
	then
		echo "DID NOT WORK"
		return $gcp_result
	fi
}

# Wrap with collapsible gitlab section for pipeline output
# $1 - section name
# $2 - section header
# $3 - section content
function collapsed_gitlab_section() {
	echo -e "section_start:`date +%s`:$1[collapsed=true]\r\e[0K$2"
	bash -c "$3"
	echo -e "section_end:`date +%s`:$1\r\e[0K"
}
