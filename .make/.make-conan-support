#!/bin/bash

# Shellscript support function file for Conan package Make targets

# Find and load the release support script
CURRENT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

function buildConan() {
    if [ -z "$1" ] ; then
		echo "buildConan: Missing CONAN_PKG"
        exit 1
	else
        CONAN_PKG="$1"
	fi

    if [ -z "$2" ] ; then
		echo "buildConan: Missing CPP_SRC"
        exit 1
	else
        CPP_SRC="$2"
	fi

    if [ -z "$3" ] ; then
		echo "buildConan: Missing CONAN_OUTPUT_DIR"
        exit 1
	else
        CONAN_OUTPUT_DIR="$3"
	fi

    if [ -z "$4" ] ; then
		echo "buildConan: Missing CONAN_USER"
        exit 1
	else
        CONAN_USER="$4"
	fi

     if [ -z "$5" ] ; then
		echo "buildConan: Missing CONAN_CHANNEL"
        exit 1
	else
        CONAN_CHANNEL="$5"
	fi

    echo "buildConan: package to build: $CONAN_PKG"
    echo "buildConan: source directory: $CPP_SRC"
    echo "buildConan: output directory: $CONAN_OUTPUT_DIR"
    echo "buildConan: CONAN_USER: $CONAN_USER"
    echo "buildConan: CONAN_CHANNEL: $CONAN_CHANNEL"

    mkdir -p $CONAN_OUTPUT_DIR

	## Variable used in the build process of Conan to set the folder where the package will be built on
    export CONAN_USER_HOME=$CONAN_OUTPUT_DIR

	## Get the contents of the conanfile and check if it contains the line the adds the metadata
	CONANFILE_CHECK_MANIFEST=$(cat ./conan/$CONAN_PKG/conanfile.py)

	if [[ $CONANFILE_CHECK_MANIFEST =~ "self.copy(\"MANIFEST.skao.int\", src=\"$CPP_SRC\")" ]]; then
		# Move metadata to src if the line is present in the conanfile.py
		mv MANIFEST.skao.int ./conan/$CONAN_PKG/$CPP_SRC

	else

		echo "buildConan: Missing self.copy(\"MANIFEST.skao.int\", src=\"$CPP_SRC\") line in the conanfile.py"
        exit 1

	fi
    
	## Get the Version and Name of the Conan package
    CONANFILE_INFO=($(conan info ./conan/$CONAN_PKG/conanfile.py -n None ))

	## If version or name Is none fail, else builds the package into CONAN_OUTPUT_DIR
    if [[ ${CONANFILE_INFO[1]} =~ "None" ]]; then

        echo "buildConan: Missing Name or Version in conanfile.py"
        exit 1

	else

		conan create conan/$CONAN_PKG/ $CONAN_USER/$CONAN_CHANNEL
		rm ./conan/$CONAN_PKG/$CPP_SRC/MANIFEST.skao.int
	fi

}

function publishConan() {
    if [ -z "$1" ] ; then
		echo "publishConan: Missing CONAN_PKG"
        exit 1
	else
        CONAN_PKG="$1"
	fi
    if [ -z "$2" ] ; then
		echo "publishConan: Missing CONAN_OUTPUT_DIR"
        exit 1
	else
        CONAN_OUTPUT_DIR="$2"
	fi

    if [ -z "$3" ] ; then
		echo "publishConan: Missing CONAN_USER"
        exit 1
	else
        CONAN_USER="$3"
	fi

     if [ -z "$4" ] ; then
		echo "publishConan: Missing CONAN_CHANNEL"
        exit 1
	else
        CONAN_CHANNEL="$4"
	fi

	## Variable used in the build process of Conan to set the folder where the package will be built on
    export CONAN_USER_HOME=$CONAN_OUTPUT_DIR

	## Add conan-internal remote for Nexus 
	conan remote add conan-internal $CAR_CONAN_REPOSITORY_URL --force
	
	## Set user and password for conan-internal repo
	conan user $CAR_CONAN_USERNAME -p $CAR_CONAN_PASSWORD -r conan-internal

	## Get the information from the conanfile.py
	CONANFILE_INFO=($(conan info ./conan/$CONAN_PKG/conanfile.py -n None ))

	## Parse the version of the package that was inside conanfile.py 
	CONAN_PKG_VERSION=$(echo ${CONANFILE_INFO[1]} | awk -F/ '{print $2}' | tr -d ")")

	## Parse the name of the package that was inside conanfile.py 
	CONAN_PKG_NAME=$(echo ${CONANFILE_INFO[1]} | awk -F/ '{print $1}' | tr -d "(")
	
	## Upload package to CAR_CONAN_REPOSITORY_URL
	conan upload $CONAN_PKG_NAME/$CONAN_PKG_VERSION@$CONAN_USER/$CONAN_CHANNEL -r conan-internal --all

}
