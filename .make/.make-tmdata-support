#!/bin/bash

# Shellscript support function file for Raw package Make targets

# Find and load the release support script
CURRENT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

function buildTMData() {

    if [ -z "$1" ] ; then
		echo "buildRaw: Missing TMDATA_SRC_DIR"
        exit 1
    else
        TMDATA_SRC_DIR="$1"
    fi

    if [ -z "$2" ] ; then
		echo "buildRaw: Missing TMDATA_OUTPUT_DIR"
        exit 1
    else
        TMDATA_OUTPUT_DIR="$2"
    fi

    echo "buildTMData: output directory: $TMDATA_OUTPUT_DIR"

    # Build file tree
    python -c "
import sys
import os
import pathlib
import json

result = []
root = '$TMDATA_SRC_DIR'
out = '$TMDATA_OUTPUT_DIR/tmtree.json'
os.makedirs('$TMDATA_OUTPUT_DIR')
for d, dirs, files in os.walk(root):
    relative = d[len(root):]
    for f in files:
        stats = os.stat(f'{d}/{f}')
        hash = os.popen(f'git log -n 1 --pretty=%H -- {d}/{f}').read()
        result.append({
            'name': f,
            'path': f\"$TMDATA_SRC_DIR{relative}/{f}\",
            'type': 'blob',
            'size': stats.st_size,
            'id': hash.rstrip()
        })
with open(out, 'w') as f:
    json.dump(result, f)
print(f'buildTMData: Wrote summary of {len(result)} files to {out}')
"

    mkdir -p $TMDATA_OUTPUT_DIR
    tar -czf "$TMDATA_OUTPUT_DIR/tmdata.tar.gz" "$TMDATA_SRC_DIR"
    
    # Find and load the metadata support script
    . ${CURRENT_SCRIPT_DIR}/.make-metadata-support ; metadataPatch "$TMDATA_OUTPUT_DIR/tmdata.tar.gz" "MANIFEST.skao.int"

    echo "buildTMData: built package (with metadata): $(ls $TMDATA_OUTPUT_DIR/tmdata.tar.gz)"
}

function publishTMData() {

    if [ -z "$1" ] ; then
		echo "buildRaw: Missing TMDATA_SRC_DIR"
        exit 1
    else
        TMDATA_SRC_DIR="$1"
    fi

    if [ -z "$2" ] ; then
		echo "buildRaw: Missing TMDATA_OUTPUT_DIR"
        exit 1
    else
        TMDATA_OUTPUT_DIR="$2"
    fi

    echo "publishTMData: output directory: $TMDATA_OUTPUT_DIR"

    if [ -z "$3" ] ; then
	echo "publishTMData: Missing COMMIT_SHA"
        exit 1
    else
        COMMIT_SHA="$3"
    fi

    # Check that files exist
    TMTREE_PATH=$TMDATA_OUTPUT_DIR/tmtree.json
    TMDATA_PATH=$TMDATA_OUTPUT_DIR/tmdata.tar.gz

    if [ ! -f "${TMDATA_PATH}" ]; then
        echo "publishTMData: Archive does not exist: ${TMDATA_PATH} - aborting."
        exit 1
    fi
    if [ ! -f "${TMTREE_PATH}" ]; then
        echo "publishTMData: File list does not exist: ${TMTREE_PATH} - aborting."
        exit 1
    fi

    # Derive TMDATA repository from RAW repository environment variables, if needed
    if [ ! -z "${CAR_TMDATA_REPOSITORY_URL}" ]; then
        TMDATA_BASE_URL="${CAR_TMDATA_REPOSITORY_URL}"
        USERNAME="${CAR_TMDATA_USERNAME}"
        PASSWORD="${CAR_TMDATA_PASSWORD}"
    elif [ ! -z "${CAR_RAW_REPOSITORY_URL}" ]; then
        TMDATA_BASE_URL="${CAR_RAW_REPOSITORY_URL%internal}telmodel"
        USERNAME="${CAR_RAW_USERNAME}"
        PASSWORD="${CAR_RAW_PASSWORD}"
    else
        echo "publishTMData: Neither CAR_TMDATA_REPOSITORY_URL nor CAR_RAW_REPOSITORY_URL set, aborting."
        exit 1
    fi

    if [ -z "${CI_SERVER_HOST}" ] || [ -z "${CI_PROJECT_PATH}" ] ; then
	echo "publishTMData: Missing CI_SERVER_HOST and/or CI_PROJECT_PATH, aborting."
        exit 1
    else
        COMMIT_SHA="$3"
    fi
    
    TMDATA_BASE_URL="${TMDATA_BASE_URL}/${CI_SERVER_HOST}/${CI_PROJECT_PATH}/${TMDATA_SRC_DIR}"
    TMDATA_COMMIT_URL="${TMDATA_BASE_URL}/~${COMMIT_SHA}/"

    echo "publishTMData: package to publish: $TMDATA_PATH, file list $TMTREE_PATH"
    echo "publishTMData: target URL: $TMDATA_COMMIT_URL"

    # Upload data + file package to artefact repository
    curl -v -u $USERNAME:$PASSWORD --upload-file "{$TMDATA_PATH,$TMTREE_PATH}" $TMDATA_COMMIT_URL

    for i in "${@:4}"
    do
        if [ ! -z "${i}" ]; then
            TAG_URL="${TMDATA_BASE_URL}/${i}"
            echo "publishTMData: Setting tag at ${TAG_URL} to ${COMMIT_SHA}..."
            echo ${COMMIT_SHA} | curl -u $USERNAME:$PASSWORD --upload-file - $TAG_URL
        fi
    done

}

